{
  "$type":"KaVE.Commons.Model.Events.CompletionEvents.Context, KaVE.Commons",
  "TypeShape":{
    "$type":"KaVE.Commons.Model.TypeShapes.TypeShape, KaVE.Commons",
    "TypeHierarchy":{
      "$type":"KaVE.Commons.Model.TypeShapes.TypeHierarchy, KaVE.Commons",
      "Element":"CSharp.TypeName:Test.RecursionTest, ConsoleTest",
      "Implements":[

      ]
    },
    "MethodHierarchies":[
      {
        "$type":"KaVE.Commons.Model.TypeShapes.MethodHierarchy, KaVE.Commons",
        "Element":"CSharp.MethodName:[System.String, mscorlib, 4.0.0.0] [Test.RecursionTest, ConsoleTest].Entry1([System.String, mscorlib, 4.0.0.0] arg)"
      },
      {
        "$type":"KaVE.Commons.Model.TypeShapes.MethodHierarchy, KaVE.Commons",
        "Element":"CSharp.MethodName:[System.Void, mscorlib, 4.0.0.0] [Test.RecursionTest, ConsoleTest].Entry2([System.String, mscorlib, 4.0.0.0] arg)"
      },
      {
        "$type":"KaVE.Commons.Model.TypeShapes.MethodHierarchy, KaVE.Commons",
        "Element":"CSharp.MethodName:[System.Void, mscorlib, 4.0.0.0] [Test.RecursionTest, ConsoleTest].Show([System.String, mscorlib, 4.0.0.0] arg)"
      }
    ]
  },
  "SST":{
    "$type":"[SST:SST]",
    "EnclosingType":"CSharp.TypeName:Test.RecursionTest, ConsoleTest",
    "PartialClassIdentifier":"",
    "Fields":[

    ],
    "Properties":[

    ],
    "Methods":[
      {
        "$type":"[SST:Declarations.MethodDeclaration]",
        "Name":"CSharp.MethodName:[System.String, mscorlib, 4.0.0.0] [Test.RecursionTest, ConsoleTest].Entry1([System.String, mscorlib, 4.0.0.0] arg)",
        "IsEntryPoint":true,
        "Body":[
          {
            "$type":"[SST:Statements.VariableDeclaration]",
            "Reference":{
              "$type":"[SST:References.VariableReference]",
              "Identifier":"$0"
            },
            "Type":"CSharp.StructTypeName:System.Boolean, mscorlib, 4.0.0.0"
          },
          {
            "$type":"[SST:Statements.Assignment]",
            "Reference":{
              "$type":"[SST:References.VariableReference]",
              "Identifier":"$0"
            },
            "Expression":{
              "$type":"[SST:Expressions.Assignable.BinaryExpression]",
              "LeftOperand":{
                "$type":"[SST:Expressions.Simple.ReferenceExpression]",
                "Reference":{
                  "$type":"[SST:References.PropertyReference]",
                  "Reference":{
                    "$type":"[SST:References.VariableReference]",
                    "Identifier":"arg"
                  },
                  "PropertyName":"CSharp.PropertyName:get [System.Int32, mscorlib, 4.0.0.0] [System.String, mscorlib, 4.0.0.0].Length()"
                }
              },
              "Operator":3,
              "RightOperand":{
                "$type":"[SST:Expressions.Simple.ConstantValueExpression]",
                "Value":"1"
              }
            }
          },
          {
            "$type":"[SST:Blocks.IfElseBlock]",
            "Condition":{
              "$type":"[SST:Expressions.Simple.ReferenceExpression]",
              "Reference":{
                "$type":"[SST:References.VariableReference]",
                "Identifier":"$0"
              }
            },
            "Then":[
              {
                "$type":"[SST:Statements.ReturnStatement]",
                "Expression":{
                  "$type":"[SST:Expressions.Simple.ReferenceExpression]",
                  "Reference":{
                    "$type":"[SST:References.VariableReference]",
                    "Identifier":"arg"
                  }
                },
                "IsVoid":false
              }
            ],
            "Else":[
              {
                "$type":"[SST:Statements.VariableDeclaration]",
                "Reference":{
                  "$type":"[SST:References.VariableReference]",
                  "Identifier":"half"
                },
                "Type":"CSharp.StructTypeName:System.Int32, mscorlib, 4.0.0.0"
              },
              {
                "$type":"[SST:Statements.Assignment]",
                "Reference":{
                  "$type":"[SST:References.VariableReference]",
                  "Identifier":"half"
                },
                "Expression":{
                  "$type":"[SST:Expressions.Assignable.BinaryExpression]",
                  "LeftOperand":{
                    "$type":"[SST:Expressions.Simple.ReferenceExpression]",
                    "Reference":{
                      "$type":"[SST:References.PropertyReference]",
                      "Reference":{
                        "$type":"[SST:References.VariableReference]",
                        "Identifier":"arg"
                      },
                      "PropertyName":"CSharp.PropertyName:get [System.Int32, mscorlib, 4.0.0.0] [System.String, mscorlib, 4.0.0.0].Length()"
                    }
                  },
                  "Operator":12,
                  "RightOperand":{
                    "$type":"[SST:Expressions.Simple.ConstantValueExpression]",
                    "Value":"2"
                  }
                }
              },
              {
                "$type":"[SST:Statements.VariableDeclaration]",
                "Reference":{
                  "$type":"[SST:References.VariableReference]",
                  "Identifier":"$1"
                },
                "Type":"CSharp.TypeName:System.String, mscorlib, 4.0.0.0"
              },
              {
                "$type":"[SST:Statements.Assignment]",
                "Reference":{
                  "$type":"[SST:References.VariableReference]",
                  "Identifier":"$1"
                },
                "Expression":{
                  "$type":"[SST:Expressions.Assignable.InvocationExpression]",
                  "Reference":{
                    "$type":"[SST:References.VariableReference]",
                    "Identifier":"arg"
                  },
                  "MethodName":"CSharp.MethodName:[System.String, mscorlib, 4.0.0.0] [System.String, mscorlib, 4.0.0.0].Substring([System.Int32, mscorlib, 4.0.0.0] startIndex)",
                  "Parameters":[
                    {
                      "$type":"[SST:Expressions.Simple.ReferenceExpression]",
                      "Reference":{
                        "$type":"[SST:References.VariableReference]",
                        "Identifier":"half"
                      }
                    }
                  ]
                }
              },
              {
                "$type":"[SST:Statements.VariableDeclaration]",
                "Reference":{
                  "$type":"[SST:References.VariableReference]",
                  "Identifier":"$2"
                },
                "Type":"CSharp.TypeName:System.String, mscorlib, 4.0.0.0"
              },
              {
                "$type":"[SST:Statements.Assignment]",
                "Reference":{
                  "$type":"[SST:References.VariableReference]",
                  "Identifier":"$2"
                },
                "Expression":{
                  "$type":"[SST:Expressions.Assignable.InvocationExpression]",
                  "Reference":{
                    "$type":"[SST:References.VariableReference]",
                    "Identifier":"this"
                  },
                  "MethodName":"CSharp.MethodName:[System.String, mscorlib, 4.0.0.0] [Test.RecursionTest, ConsoleTest].Entry1([System.String, mscorlib, 4.0.0.0] arg)",
                  "Parameters":[
                    {
                      "$type":"[SST:Expressions.Simple.ReferenceExpression]",
                      "Reference":{
                        "$type":"[SST:References.VariableReference]",
                        "Identifier":"$1"
                      }
                    }
                  ]
                }
              },
              {
                "$type":"[SST:Statements.VariableDeclaration]",
                "Reference":{
                  "$type":"[SST:References.VariableReference]",
                  "Identifier":"$3"
                },
                "Type":"CSharp.TypeName:System.String, mscorlib, 4.0.0.0"
              },
              {
                "$type":"[SST:Statements.Assignment]",
                "Reference":{
                  "$type":"[SST:References.VariableReference]",
                  "Identifier":"$3"
                },
                "Expression":{
                  "$type":"[SST:Expressions.Assignable.InvocationExpression]",
                  "Reference":{
                    "$type":"[SST:References.VariableReference]",
                    "Identifier":"arg"
                  },
                  "MethodName":"CSharp.MethodName:[System.String, mscorlib, 4.0.0.0] [System.String, mscorlib, 4.0.0.0].Substring([System.Int32, mscorlib, 4.0.0.0] startIndex, [System.Int32, mscorlib, 4.0.0.0] length)",
                  "Parameters":[
                    {
                      "$type":"[SST:Expressions.Simple.ConstantValueExpression]",
                      "Value":"0"
                    },
                    {
                      "$type":"[SST:Expressions.Simple.ReferenceExpression]",
                      "Reference":{
                        "$type":"[SST:References.VariableReference]",
                        "Identifier":"half"
                      }
                    }
                  ]
                }
              },
              {
                "$type":"[SST:Statements.VariableDeclaration]",
                "Reference":{
                  "$type":"[SST:References.VariableReference]",
                  "Identifier":"$4"
                },
                "Type":"CSharp.TypeName:System.String, mscorlib, 4.0.0.0"
              },
              {
                "$type":"[SST:Statements.Assignment]",
                "Reference":{
                  "$type":"[SST:References.VariableReference]",
                  "Identifier":"$4"
                },
                "Expression":{
                  "$type":"[SST:Expressions.Assignable.InvocationExpression]",
                  "Reference":{
                    "$type":"[SST:References.VariableReference]",
                    "Identifier":"this"
                  },
                  "MethodName":"CSharp.MethodName:[System.String, mscorlib, 4.0.0.0] [Test.RecursionTest, ConsoleTest].Entry1([System.String, mscorlib, 4.0.0.0] arg)",
                  "Parameters":[
                    {
                      "$type":"[SST:Expressions.Simple.ReferenceExpression]",
                      "Reference":{
                        "$type":"[SST:References.VariableReference]",
                        "Identifier":"$3"
                      }
                    }
                  ]
                }
              },
              {
                "$type":"[SST:Statements.VariableDeclaration]",
                "Reference":{
                  "$type":"[SST:References.VariableReference]",
                  "Identifier":"$5"
                },
                "Type":"CSharp.TypeName:System.String, mscorlib, 4.0.0.0"
              },
              {
                "$type":"[SST:Statements.Assignment]",
                "Reference":{
                  "$type":"[SST:References.VariableReference]",
                  "Identifier":"$5"
                },
                "Expression":{
                  "$type":"[SST:Expressions.Assignable.BinaryExpression]",
                  "LeftOperand":{
                    "$type":"[SST:Expressions.Simple.ReferenceExpression]",
                    "Reference":{
                      "$type":"[SST:References.VariableReference]",
                      "Identifier":"$2"
                    }
                  },
                  "Operator":9,
                  "RightOperand":{
                    "$type":"[SST:Expressions.Simple.ReferenceExpression]",
                    "Reference":{
                      "$type":"[SST:References.VariableReference]",
                      "Identifier":"$4"
                    }
                  }
                }
              },
              {
                "$type":"[SST:Statements.ReturnStatement]",
                "Expression":{
                  "$type":"[SST:Expressions.Simple.ReferenceExpression]",
                  "Reference":{
                    "$type":"[SST:References.VariableReference]",
                    "Identifier":"$5"
                  }
                },
                "IsVoid":false
              }
            ]
          }
        ]
      },
      {
        "$type":"[SST:Declarations.MethodDeclaration]",
        "Name":"CSharp.MethodName:[System.Void, mscorlib, 4.0.0.0] [Test.RecursionTest, ConsoleTest].Entry2([System.String, mscorlib, 4.0.0.0] arg)",
        "IsEntryPoint":true,
        "Body":[
          {
            "$type":"[SST:Statements.VariableDeclaration]",
            "Reference":{
              "$type":"[SST:References.VariableReference]",
              "Identifier":"$0"
            },
            "Type":"CSharp.StructTypeName:System.Boolean, mscorlib, 4.0.0.0"
          },
          {
            "$type":"[SST:Statements.Assignment]",
            "Reference":{
              "$type":"[SST:References.VariableReference]",
              "Identifier":"$0"
            },
            "Expression":{
              "$type":"[SST:Expressions.Assignable.BinaryExpression]",
              "LeftOperand":{
                "$type":"[SST:Expressions.Simple.ReferenceExpression]",
                "Reference":{
                  "$type":"[SST:References.VariableReference]",
                  "Identifier":"arg"
                }
              },
              "Operator":6,
              "RightOperand":{
                "$type":"[SST:Expressions.Simple.ReferenceExpression]",
                "Reference":{
                  "$type":"[SST:References.FieldReference]",
                  "Reference":{
                    "$type":"[SST:References.VariableReference]",
                    "Identifier":""
                  },
                  "FieldName":"CSharp.FieldName:static [System.String, mscorlib, 4.0.0.0] [System.String, mscorlib, 4.0.0.0].Empty"
                }
              }
            }
          },
          {
            "$type":"[SST:Blocks.IfElseBlock]",
            "Condition":{
              "$type":"[SST:Expressions.Simple.ReferenceExpression]",
              "Reference":{
                "$type":"[SST:References.VariableReference]",
                "Identifier":"$0"
              }
            },
            "Then":[
              {
                "$type":"[SST:Statements.VariableDeclaration]",
                "Reference":{
                  "$type":"[SST:References.VariableReference]",
                  "Identifier":"half"
                },
                "Type":"CSharp.StructTypeName:System.Int32, mscorlib, 4.0.0.0"
              },
              {
                "$type":"[SST:Statements.Assignment]",
                "Reference":{
                  "$type":"[SST:References.VariableReference]",
                  "Identifier":"half"
                },
                "Expression":{
                  "$type":"[SST:Expressions.Assignable.BinaryExpression]",
                  "LeftOperand":{
                    "$type":"[SST:Expressions.Simple.ReferenceExpression]",
                    "Reference":{
                      "$type":"[SST:References.PropertyReference]",
                      "Reference":{
                        "$type":"[SST:References.VariableReference]",
                        "Identifier":"arg"
                      },
                      "PropertyName":"CSharp.PropertyName:get [System.Int32, mscorlib, 4.0.0.0] [System.String, mscorlib, 4.0.0.0].Length()"
                    }
                  },
                  "Operator":12,
                  "RightOperand":{
                    "$type":"[SST:Expressions.Simple.ConstantValueExpression]",
                    "Value":"2"
                  }
                }
              },
              {
                "$type":"[SST:Statements.VariableDeclaration]",
                "Reference":{
                  "$type":"[SST:References.VariableReference]",
                  "Identifier":"$1"
                },
                "Type":"CSharp.TypeName:System.String, mscorlib, 4.0.0.0"
              },
              {
                "$type":"[SST:Statements.Assignment]",
                "Reference":{
                  "$type":"[SST:References.VariableReference]",
                  "Identifier":"$1"
                },
                "Expression":{
                  "$type":"[SST:Expressions.Assignable.InvocationExpression]",
                  "Reference":{
                    "$type":"[SST:References.VariableReference]",
                    "Identifier":"arg"
                  },
                  "MethodName":"CSharp.MethodName:[System.String, mscorlib, 4.0.0.0] [System.String, mscorlib, 4.0.0.0].Substring([System.Int32, mscorlib, 4.0.0.0] startIndex, [System.Int32, mscorlib, 4.0.0.0] length)",
                  "Parameters":[
                    {
                      "$type":"[SST:Expressions.Simple.ConstantValueExpression]",
                      "Value":"0"
                    },
                    {
                      "$type":"[SST:Expressions.Simple.ReferenceExpression]",
                      "Reference":{
                        "$type":"[SST:References.VariableReference]",
                        "Identifier":"half"
                      }
                    }
                  ]
                }
              },
              {
                "$type":"[SST:Statements.ExpressionStatement]",
                "Expression":{
                  "$type":"[SST:Expressions.Assignable.InvocationExpression]",
                  "Reference":{
                    "$type":"[SST:References.VariableReference]",
                    "Identifier":"this"
                  },
                  "MethodName":"CSharp.MethodName:[System.Void, mscorlib, 4.0.0.0] [Test.RecursionTest, ConsoleTest].Show([System.String, mscorlib, 4.0.0.0] arg)",
                  "Parameters":[
                    {
                      "$type":"[SST:Expressions.Simple.ReferenceExpression]",
                      "Reference":{
                        "$type":"[SST:References.VariableReference]",
                        "Identifier":"$1"
                      }
                    }
                  ]
                }
              }
            ],
            "Else":[

            ]
          }
        ]
      },
      {
        "$type":"[SST:Declarations.MethodDeclaration]",
        "Name":"CSharp.MethodName:[System.Void, mscorlib, 4.0.0.0] [Test.RecursionTest, ConsoleTest].Show([System.String, mscorlib, 4.0.0.0] arg)",
        "IsEntryPoint":false,
        "Body":[
          {
            "$type":"[SST:Statements.ExpressionStatement]",
            "Expression":{
              "$type":"[SST:Expressions.Assignable.InvocationExpression]",
              "Reference":{
                "$type":"[SST:References.VariableReference]",
                "Identifier":""
              },
              "MethodName":"CSharp.MethodName:static [System.Void, mscorlib, 4.0.0.0] [System.Console, mscorlib, 4.0.0.0].WriteLine([System.String, mscorlib, 4.0.0.0] value)",
              "Parameters":[
                {
                  "$type":"[SST:Expressions.Simple.ReferenceExpression]",
                  "Reference":{
                    "$type":"[SST:References.VariableReference]",
                    "Identifier":"arg"
                  }
                }
              ]
            }
          },
          {
            "$type":"[SST:Statements.ExpressionStatement]",
            "Expression":{
              "$type":"[SST:Expressions.Assignable.InvocationExpression]",
              "Reference":{
                "$type":"[SST:References.VariableReference]",
                "Identifier":"this"
              },
              "MethodName":"CSharp.MethodName:[System.Void, mscorlib, 4.0.0.0] [Test.RecursionTest, ConsoleTest].Entry2([System.String, mscorlib, 4.0.0.0] arg)",
              "Parameters":[
                {
                  "$type":"[SST:Expressions.Simple.ReferenceExpression]",
                  "Reference":{
                    "$type":"[SST:References.VariableReference]",
                    "Identifier":"arg"
                  }
                }
              ]
            }
          }
        ]
      }
    ],
    "Events":[

    ],
    "Delegates":[

    ]
  }
}